{
  "name": "EXECUTE_SETTLEMENT",
  "test_cases": [
    {
      "id": 1,
      "name": "EXECUTE_WHOLE_SETTLEMENT",
      "requests": [
        {
          "id": 1,
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Close existent window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200 or 400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "New window State should be OPEN",
                "exec": [
                  "",
                  " if (response.status === 400) {",
                  "   ",
                  "expect(response.body.errorInformation.errorCode).to.eql('3100');",
                  "expect(response.body.errorInformation.errorDescription).to.eql('Generic validation error - Window ' + environment.openWindowID + ' is empty');",
                  "}else{",
                  "  ",
                  "  ",
                  "  expect(environment.openWindowstate).to.equal(\"OPEN\");",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "var rcode = Number(response.status);",
                "//console.log(rcode);",
                "",
                "//if (rcode == 200){",
                "environment.closedWindowID= Number(environment.openWindowID);",
                "environment.openWindowstate=jsonData.state;",
                "",
                "console.log(environment.openWindowstate);",
                "console.log(environment.closedWindowID);",
                "//}"
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Create Settlement for Closed Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Number of associated windows should be 1",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows.length).to.equal(1)",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)",
                  "}"
                ]
              },
              {
                "id": 5,
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "{$inputs.settlementModel}",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$requestVariables.closedWindowID}"
              }
            ]
          },
          "delay": "1000",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "environment.settlementId = jsonData.id;",
                "environment.winstate = jsonData.state;",
                "",
                "if (response.body.errorInformation.errorCode === \"3100\"){",
                "  ",
                "  environment.WINDOWISEMPTY = true;",
                "  console.log(\"Window is empty\");",
                "}else{",
                "  environment.WINDOWISEMPTY = false;",
                "}"
              ]
            },
            "preRequest": {
              "exec": [
                "//environment.closedWindowID = 6;",
                "requestVariables.closedWindowID = Number(environment.closedWindowID);",
                "",
                "/*requestVariables.closedWindowID = Number(environment.closedWindowID);",
                "*/",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Prepare Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "console.log(environment.settlementId);",
                "//environment.settlementId = 6;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers recorded for payer\",",
                "                      \"state\": \"PS_TRANSFERS_RECORDED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "Reserve Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "//environment.settlementId = 1;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "",
                "if(environment.winstate===\"PS_TRANSFERS_RECORDED\"){",
                "",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  //console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers reserved\",",
                "                      \"state\": \"PS_TRANSFERS_RESERVED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "Commit Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "//environment.settlementId = 1;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "",
                "if(environment.winstate===\"PS_TRANSFERS_RESERVED\"){",
                "",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  //console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers committed\",",
                "                      \"state\": \"PS_TRANSFERS_COMMITTED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "/*res.participants.map(participant => {",
                "  participant.accounts",
                "    .forEach(curAccount => {*/",
                "  "
              ]
            }
          }
        },
        {
          "id": 7,
          "description": "Settle Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "//environment.settlementId = 1;",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "",
                "if(environment.winstate===\"PS_TRANSFERS_COMMITTED\"){",
                "",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.forEach(curAccount => {",
                "//for(const curAccount of account) {     ",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "//}",
                "})",
                " })",
                "    ",
                "",
                "const config = { headers: {'Content-Type': 'application/json','FSPIOP-Source': 'testingtoolkitdfsp'} };",
                "for(let dfspsaccx of dfspsacc){",
                "  //console.log(dfspsaccx.dfspid,dfspsaccx.dfspaccid)",
                "callbackpayer = await axios.put(environment.HOST_CENTRAL_SETTLEMENT + '/settlements/'+environment.settlementId, {",
                "              \"participants\": [",
                "                {",
                "                  \"id\": dfspsaccx.dfspid,",
                "                  \"accounts\": [",
                "                    {",
                "                      \"id\": dfspsaccx.dfspaccid,",
                "                      \"reason\": \"Transfers settled for payer\",",
                "                      \"state\": \"SETTLED\"",
                "                    }",
                "                  ]",
                "                }",
                "              ]",
                "            },config)    ",
                "console.log(callbackpayer.data);  ",
                "}",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}",
                "",
                "  "
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "Funds_out for PayeeFSP",
      "meta": {
        "info": "Funds_out for PayeeFSP"
      },
      "requests": [
        {
          "id": 1,
          "description": "Get settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "let fundsOutAccounts = {}",
                "const participants = response.body.participants",
                "for (let i=0; i < participants.length; i++) {",
                "  for (let j=0; j < participants[i].accounts.length; j++) {",
                "    const account  = participants[i].accounts[j]",
                "    if (account.state === 'SETTLED' && account.netSettlementAmount.amount < 0) {",
                "      fundsOutAccounts[account.id] = -account.netSettlementAmount.amount",
                "    }",
                "  }",
                "}",
                "environment.fundsOutAccounts = fundsOutAccounts",
                ""
              ]
            }
          },
          "scriptingEngine": "javascript",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}"
        },
        {
          "id": 2,
          "meta": {
            "info": "Get testingtoolkitdfsp settlement account"
          },
          "description": "Get testingtoolkitdfsp settlement account",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.mobileSimPayeeFsp}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.mobileSimPayeeFsp}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "\r",
                "var jsonData = response.body;\r",
                "\r",
                "// Find the position account exists for funds-out\r",
                "for(var i in jsonData) {\r",
                "  if(jsonData[i].ledgerAccountType === 'POSITION' && environment.fundsOutAccounts[jsonData[i].id]) {\r",
                "    const settlementAccount  = jsonData.find(item => (item.ledgerAccountType === 'SETTLEMENT') && (item.currency === jsonData[i].currency))\r",
                "    if (settlementAccount) {\r",
                "      environment.payeefspSettlementAccountId = settlementAccount.id\r",
                "      environment.payeefspSettlementAccountAmount = environment.fundsOutAccounts[jsonData[i].id]\r",
                "      environment.payeefspSettlementAccountCurrency = settlementAccount.currency\r",
                "      break\r",
                "    }\r",
                "  }\r",
                "}\r",
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Record Funds Out Prepare&Reserve- SIMPAYER"
          },
          "description": "Record Funds Out Prepare&Reserve- SIMPAYER",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.mobileSimPayeeFsp}/accounts/{$environment.payeefspSettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.mobileSimPayeeFsp}",
            "id": "{$environment.payeefspSettlementAccountId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.mobileSimPayeeFsp}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "body": {
            "transferId": "{$function.generic.generateUUID}",
            "externalReference": "string",
            "action": "recordFundsOutPrepareReserve",
            "reason": "string",
            "amount": {
              "amount": "{$environment.payeefspSettlementAccountAmount}",
              "currency": "{$environment.payeefspSettlementAccountCurrency}"
            },
            "extensionList": {
              "extension": [
                {
                  "key": "string",
                  "value": "string"
                }
              ]
            }
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "if (!environment.payeefspSettlementAccountId) {\r",
                "  custom.skipRequest()\r",
                "}\r",
                "// environment.fundsOutPrepareReserveAmount= requestVariables.fundsOutPrepareAmount;\r",
                "// requestVariables.payerid= environment.testingtoolkitdfspSettlementAccountId\r",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "/*var url = environment.HOST_CENTRAL_LEDGER;\r",
                "console.log(url);\r",
                "\r",
                "\r",
                "const res = await axios.get(environment.HOST_CENTRAL_LEDGER+'/participants/testingtoolkitdfsp/accounts');\r",
                "console.log(res.data);\r",
                "*/\r",
                "\r",
                "environment.transferidfi = '{$request.body.transferId}'\r",
                "console.log(environment.transferidfi);"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Record Funds Out Commit - SIMPAYER"
          },
          "description": "Record Funds Out Commit - SIMPAYER",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}/transfers/{transferId}",
          "path": "/participants/{$inputs.mobileSimPayeeFsp}/accounts/{$environment.payeefspSettlementAccountId}/transfers/{$environment.transferidfi}",
          "method": "put",
          "params": {
            "name": "{$inputs.mobileSimPayeeFsp}",
            "id": "{$environment.payeefspSettlementAccountId}",
            "transferId": "{$environment.transferidfi}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.mobileSimPayeeFsp}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "action": "recordFundsOutCommit",
            "reason": "Reason for out flow of funds"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "if (!environment.payeefspSettlementAccountId) {",
                "  custom.skipRequest()",
                "}",
                "environment.fundsOutCommitAmount = environment.fundsOutPrepareReserveAmount"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "Funds_in for PayerFSP",
      "meta": {
        "info": "Funds_in for PayerFSP"
      },
      "requests": [
        {
          "id": 1,
          "description": "Get settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "let fundsInAccounts = {}",
                "const participants = response.body.participants",
                "for (let i=0; i < participants.length; i++) {",
                "  for (let j=0; j < participants[i].accounts.length; j++) {",
                "    const account  = participants[i].accounts[j]",
                "    if (account.state === 'SETTLED' && account.netSettlementAmount.amount > 0) {",
                "      fundsInAccounts[account.id] = account.netSettlementAmount.amount",
                "    }",
                "  }",
                "}",
                "environment.fundsInAccounts = fundsInAccounts",
                ""
              ]
            }
          },
          "scriptingEngine": "javascript",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}"
        },
        {
          "id": 2,
          "meta": {
            "info": "Get testingtoolkitdfsp settlement account"
          },
          "description": "Get testingtoolkitdfsp settlement account",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.mobileSimPayerFsp}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.mobileSimPayerFsp}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "\r",
                "var jsonData = response.body;\r",
                "\r",
                "// Find the position account exists for funds-out\r",
                "for(var i in jsonData) {\r",
                "  if(jsonData[i].ledgerAccountType === 'POSITION' && environment.fundsInAccounts[jsonData[i].id]) {\r",
                "    const settlementAccount  = jsonData.find(item => (item.ledgerAccountType === 'SETTLEMENT') && (item.currency === jsonData[i].currency))\r",
                "    if (settlementAccount) {\r",
                "      environment.payerfspSettlementAccountId = settlementAccount.id\r",
                "      environment.payerfspSettlementAccountAmount = environment.fundsInAccounts[jsonData[i].id]\r",
                "      environment.payerfspSettlementAccountCurrency = settlementAccount.currency\r",
                "      break\r",
                "    }\r",
                "  }\r",
                "}\r",
                "\r",
                ""
              ]
            }
          }
        },
        {
          "id": 9,
          "meta": {
            "info": "Record funds in - prepare 2"
          },
          "description": "Record funds in - prepare 2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.mobileSimPayerFsp}/accounts/{$environment.payerfspSettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.mobileSimPayerFsp}",
            "id": "{$environment.payerfspSettlementAccountId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.mobileSimPayerFsp}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "body": {
            "transferId": "{$function.generic.generateUUID}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$environment.payerfspSettlementAccountAmount}",
              "currency": "{$environment.payerfspSettlementAccountCurrency}"
            },
            "extensionList": {
              "extension": [
                {
                  "key": "string",
                  "value": "string"
                }
              ]
            }
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "\r",
                "requestVariables.fundsInPrepareAmount= 10;\r",
                "environment.fundsInPrepareAmount= requestVariables.fundsInPrepareAmount;\r",
                "requestVariables.payerid= environment.testingtoolkitdfspSettlementAccountId\r",
                "\r",
                "\r",
                "console.log(requestVariables.payerid);\r",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "/*var url = environment.HOST_CENTRAL_LEDGER;\r",
                "console.log(url);\r",
                "\r",
                "\r",
                "const res = await axios.get(environment.HOST_CENTRAL_LEDGER+'/participants/testingtoolkitdfsp/accounts');\r",
                "console.log(res.data);\r",
                "*/\r",
                "\r",
                "environment.transferidfi = '{$request.body.transferId}'\r",
                "console.log(environment.transferidfi);"
              ]
            }
          }
        }
      ]
    }
  ]
}